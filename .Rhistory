#'@param method character string to specify the estimating method of between-study variance. By default (method="DL"), DerSimonian-Laird estimator is obtained. When method="SJ", Sidik-Jonkman estimator is obtained.
#'@param obj character string to specify the objective. "Estimate", which set to default, is overall treatment effect. "Predict" is predictive treatment effect.
#'
#'@return contour plot of simultaneous distribution of overall treatment effect and between-study variance.
#'
#'
#'@export
plot_dsim_th_tau2 <- function(contour_val=c(0.01, 0.05, 0.2, 0.4, 0.6, 0.8),
theta=0, tau2, K, vi, alpha=0.05,
theta.limit=c(-10,10), tau2.limit=c(0,10), length.out=1000,
n=100000, method="DL", obj="Estimate"){
yval <- seq(theta.limit[1], theta.limit[2], length.out = length.out)
xval <- seq(tau2.limit[1], tau2.limit[2], length.out = length.out)
zval <- outer(X=yval, Y=xval, dsim_th_tau2, theta=theta, tau2=tau2, K=K, vi=vi, method=method, obj=obj)
df <- expand.grid(x = yval, y = xval)
df$z <- as.vector(zval)
# threshold
xyrand <- rsim_th_tau2(n=n, theta=theta, tau2=tau2, K=K, vi=vi, method=method, obj=obj)
dxys <- dsim_th_tau2(y=xyrand$theta, x=xyrand$tau2, theta=theta, tau2=tau2, K=K, vi=vi, method=method, obj=obj)
z_threshold <- quantile(dxys, probs = alpha)
z_contour <- quantile(dxys, probs = contour_val)
z_threshold <- quantile(dxys, probs = alpha)
# labeling
contour_plot <- ggplot2::ggplot(df, aes(x = x, y = y, z = z)) +
ggplot2::geom_contour(breaks = z_contour)
contour_data <- ggplot2::ggplot_build(contour_plot)$data[[1]]
label_data <- aggregate(cbind(x,y) ~ level, data = contour_data, FUN = max)
label_data$x <- theta
label_data$z <- label_data$level
label_data$label <- contour_val
g <- ggplot2::ggplot(df, aes(x = x, y = y, z = z)) +
ggplot2::geom_contour(breaks = z_contour) +
ggplot2::geom_contour(breaks = z_threshold, color = "green", linewidth = 1.2) +
ggplot2::geom_text(data=label_data, aes(x=x, y=y, label=label), color="black") +
ggplot2::labs(
title = paste("Joint density function of treatment effect and between-study variance: ", method, " method", sep=""),
x = "treatment effect",
y = "between-study variance"
)
res <- list(data=df, label=label_data, contour=z_contour, qval=z_threshold, alpha=alpha, plot=g)
return(res)
}
# simultaneous distribution plot
plot_dsim_th_tau2(theta=thetah, tau2=tau2m, K=K, vi=vi, theta.limit=c(cil, ciu), tau2.limit=c(cil.tau2, ciu.tau2),
method=method, alpha=alpha)
library(metaMest)
# simultaneous distribution plot
plot_dsim_th_tau2(theta=thetah, tau2=tau2m, K=K, vi=vi, theta.limit=c(cil, ciu), tau2.limit=c(cil.tau2, ciu.tau2),
method=method, alpha=alpha)
)
# simultaneous distribution plot
yval <- seq(cil, ciu, length.out = n.grid)
yval
xval <- seq(cil.tau2, ciu.tau2, length.out=n.grid)
zval <- outer(X=yval, Y=xval, dsim_th_tau2, theta=thetah, tau2=tau2h, K=K, vi=vi, method=method, obj=obj)
obj="Estimate"
zval <- outer(X=yval, Y=xval, dsim_th_tau2, theta=thetah, tau2=tau2h, K=K, vi=vi, method=method, obj=obj)
tau2h
dsim_th_tau2(y=0, x=1, theta=thetah, tau2=tau2h, K=K, vi=vi, method=method, obj=obj)
dsim_th_tau2(y=0:10, x=1, theta=thetah, tau2=tau2h, K=K, vi=vi, method=method, obj=obj)
dsim_th_tau2(y=0:10, x=1:10, theta=thetah, tau2=tau2h, K=K, vi=vi, method=method, obj=obj)
dsim_th_tau2(y=yval, x=xval, theta=thetah, tau2=tau2h, K=K, vi=vi, method=method, obj=obj)
zval <- dsim_th_tau2(y=yval, x=xval, theta=thetah, tau2=tau2h, K=K, vi=vi, method=method, obj=obj)
df <- expand.grid(x = yval, y = xval)
df$z <- as.vector(zval)
# threshold
xyrand <- rsim_th_tau2(n=n, theta=theta, tau2=tau2, K=K, vi=vi, method=method, obj=obj)
# threshold
xyrand <- rsim_th_tau2(n=n.rand, theta=theta, tau2=tau2, K=K, vi=vi, method=method, obj=obj)
# threshold
xyrand <- rsim_th_tau2(n=n.rand, theta=thetah, tau2=tau2h, K=K, vi=vi, method=method, obj=obj)
dxys <- dsim_th_tau2(y=xyrand$theta, x=xyrand$tau2, theta=thetah, tau2=tau2h, K=K, vi=vi, method=method, obj=obj)
dxys
dxys[1,,]
dxys[1,]
dxys[,1]
z_threshold <- quantile(dxys, probs = alpha)
z_contour <- quantile(dxys, probs = contour_val)
z_threshold <- quantile(dxys, probs = alpha)
contour_val=c(0.01, 0.05, 0.2, 0.4, 0.6, 0.8)
z_threshold <- quantile(dxys, probs = alpha)
z_contour <- quantile(dxys, probs = contour_val)
z_threshold <- quantile(dxys, probs = alpha)
# labeling
contour_plot <- ggplot2::ggplot(df, aes(x = x, y = y, z = z)) +
ggplot2::geom_contour(breaks = z_contour)
library(ggplot2)
# labeling
contour_plot <- ggplot2::ggplot(df, aes(x = x, y = y, z = z)) +
ggplot2::geom_contour(breaks = z_contour)
contour_data <- ggplot2::ggplot_build(contour_plot)$data[[1]]
label_data <- aggregate(cbind(x,y) ~ level, data = contour_data, FUN = max)
label_data$x <- theta
label_data$z <- label_data$level
label_data$x <- thetah
label_data$z <- label_data$level
label_data$label <- contour_val
label_data$x <- thetah
label_data$z <- label_data$level
label_data$label <- contour_val
label_data
contour_val
z_threshold
z_contour
# labeling
contour_plot <- ggplot2::ggplot(df, aes(x = x, y = y, z = z)) +
ggplot2::geom_contour(breaks = z_contour)
contour_data <- ggplot2::ggplot_build(contour_plot)$data[[1]]
label_data <- aggregate(cbind(x,y) ~ level, data = contour_data, FUN = max)
label_data
level
contour_data$level
# simultaneous distribution plot
pmin.theta <- uniroot(ltheta, thetah=thetah, v2m=v2m, level=0.999, interval=c(theta.min,theta.max))$root
pmax.theta <- uniroot(ltheta, thetah=thetah, v2m=v2m, level=0.001, interval=c(theta.min,theta.max))$root
pmin.theta
pmax.theta
p.tau2 <- quantile(tau2_rand, probs=c(0.001, 0.999))
yval <- seq(pmin.theta, pmax.theta, length.out=n.grid)
yval <- seq(pmin.theta, pmax.theta, length.out=n.grid)
xval <- seq(p.tau2[1], p.tau2[2], length.out=n.grid)
zval <- dsim_th_tau2(y=yval, x=xval, theta=thetah, tau2=tau2h, K=K, vi=vi, method=method, obj=obj)
df <- expand.grid(x = yval, y = xval)
df$z <- as.vector(zval)
# threshold
xyrand <- rsim_th_tau2(n=n.rand, theta=thetah, tau2=tau2h, K=K, vi=vi, method=method, obj=obj)
dxys <- dsim_th_tau2(y=xyrand$theta, x=xyrand$tau2, theta=thetah, tau2=tau2h, K=K, vi=vi, method=method, obj=obj)
z_threshold <- quantile(dxys, probs = alpha)
z_contour <- quantile(dxys, probs = contour_val)
z_threshold <- quantile(dxys, probs = alpha)
# labeling
contour_plot <- ggplot2::ggplot(df, aes(x = x, y = y, z = z)) +
ggplot2::geom_contour(breaks = z_contour)
contour_data <- ggplot2::ggplot_build(contour_plot)$data[[1]]
label_data <- aggregate(cbind(x,y) ~ level, data = contour_data, FUN = max)
label_data$x <- thetah
label_data$z <- label_data$level
label_data$label <- contour_val
label_data
g <- ggplot2::ggplot(df, aes(x = x, y = y, z = z)) +
ggplot2::geom_contour(breaks = z_contour) +
ggplot2::geom_contour(breaks = z_threshold, color = "green", linewidth = 1.2) +
ggplot2::geom_text(data=label_data, aes(x=x, y=y, label=label), color="black") +
ggplot2::labs(
title = paste("Joint density function of treatment effect and between-study variance: ", method, " method", sep=""),
x = "treatment effect",
y = "between-study variance"
)
g
yval <- seq(pmin.theta, pmax.theta, length.out=n.grid)
xval <- seq(p.tau2[1], p.tau2[2], length.out=n.grid)
zval <- dsim_th_tau2(y=yval, x=xval, theta=thetah, tau2=tau2h, K=K, vi=vi, method=method, obj=obj)
df <- expand.grid(x = yval, y = xval)
df$z <- as.vector(t(zval))
# threshold
xyrand <- rsim_th_tau2(n=n.rand, theta=thetah, tau2=tau2h, K=K, vi=vi, method=method, obj=obj)
dxys <- dsim_th_tau2(y=xyrand$theta, x=xyrand$tau2, theta=thetah, tau2=tau2h, K=K, vi=vi, method=method, obj=obj)
z_threshold <- quantile(dxys, probs = alpha)
z_contour <- quantile(dxys, probs = contour_val)
z_threshold <- quantile(dxys, probs = alpha)
# labeling
contour_plot <- ggplot2::ggplot(df, aes(x = x, y = y, z = z)) +
ggplot2::geom_contour(breaks = z_contour)
contour_data <- ggplot2::ggplot_build(contour_plot)$data[[1]]
label_data <- aggregate(cbind(x,y) ~ level, data = contour_data, FUN = max)
label_data$x <- thetah
label_data$z <- label_data$level
label_data$label <- contour_val
g <- ggplot2::ggplot(df, aes(x = x, y = y, z = z)) +
ggplot2::geom_contour(breaks = z_contour) +
ggplot2::geom_contour(breaks = z_threshold, color = "green", linewidth = 1.2) +
ggplot2::geom_text(data=label_data, aes(x=x, y=y, label=label), color="black") +
ggplot2::labs(
title = paste("Joint density function of treatment effect and between-study variance: ", method, " method", sep=""),
x = "treatment effect",
y = "between-study variance"
)
g
pmin.theta <- uniroot(ltheta, thetah=thetah, v2m=v2m, level=0.9999, interval=c(theta.min,theta.max))$root
pmax.theta <- uniroot(ltheta, thetah=thetah, v2m=v2m, level=0.0001, interval=c(theta.min,theta.max))$root
p.tau2 <- quantile(tau2_rand, probs=c(0.0001, 0.9999))
yval <- seq(pmin.theta, pmax.theta, length.out=n.grid)
xval <- seq(p.tau2[1], p.tau2[2], length.out=n.grid)
zval <- dsim_th_tau2(y=yval, x=xval, theta=thetah, tau2=tau2h, K=K, vi=vi, method=method, obj=obj)
df <- expand.grid(x = yval, y = xval)
df$z <- as.vector(t(zval))
# threshold
xyrand <- rsim_th_tau2(n=n.rand, theta=thetah, tau2=tau2h, K=K, vi=vi, method=method, obj=obj)
dxys <- dsim_th_tau2(y=xyrand$theta, x=xyrand$tau2, theta=thetah, tau2=tau2h, K=K, vi=vi, method=method, obj=obj)
z_threshold <- quantile(dxys, probs = alpha)
z_contour <- quantile(dxys, probs = contour_val)
z_threshold <- quantile(dxys, probs = alpha)
# labeling
contour_plot <- ggplot2::ggplot(df, aes(x = x, y = y, z = z)) +
ggplot2::geom_contour(breaks = z_contour)
contour_data <- ggplot2::ggplot_build(contour_plot)$data[[1]]
label_data <- aggregate(cbind(x,y) ~ level, data = contour_data, FUN = max)
label_data$x <- thetah
label_data$z <- label_data$level
label_data$label <- contour_val
g <- ggplot2::ggplot(df, aes(x = x, y = y, z = z)) +
ggplot2::geom_contour(breaks = z_contour) +
ggplot2::geom_contour(breaks = z_threshold, color = "green", linewidth = 1.2) +
ggplot2::geom_text(data=label_data, aes(x=x, y=y, label=label), color="black") +
ggplot2::labs(
title = paste("Joint density function of treatment effect and between-study variance: ", method, " method", sep=""),
x = "treatment effect",
y = "between-study variance"
)
g
n.grid=300
# simultaneous distribution plot
pmin.theta <- uniroot(ltheta, thetah=thetah, v2m=v2m, level=0.9999, interval=c(theta.min,theta.max))$root
pmax.theta <- uniroot(ltheta, thetah=thetah, v2m=v2m, level=0.0001, interval=c(theta.min,theta.max))$root
p.tau2 <- quantile(tau2_rand, probs=c(0.0001, 0.9999))
yval <- seq(pmin.theta, pmax.theta, length.out=n.grid)
xval <- seq(p.tau2[1], p.tau2[2], length.out=n.grid)
zval <- dsim_th_tau2(y=yval, x=xval, theta=thetah, tau2=tau2h, K=K, vi=vi, method=method, obj=obj)
df <- expand.grid(x = yval, y = xval)
df$z <- as.vector(t(zval))
# threshold
xyrand <- rsim_th_tau2(n=n.rand, theta=thetah, tau2=tau2h, K=K, vi=vi, method=method, obj=obj)
dxys <- dsim_th_tau2(y=xyrand$theta, x=xyrand$tau2, theta=thetah, tau2=tau2h, K=K, vi=vi, method=method, obj=obj)
z_threshold <- quantile(dxys, probs = alpha)
z_contour <- quantile(dxys, probs = contour_val)
z_threshold <- quantile(dxys, probs = alpha)
# labeling
contour_plot <- ggplot2::ggplot(df, aes(x = x, y = y, z = z)) +
ggplot2::geom_contour(breaks = z_contour)
contour_data <- ggplot2::ggplot_build(contour_plot)$data[[1]]
label_data <- aggregate(cbind(x,y) ~ level, data = contour_data, FUN = max)
label_data$x <- thetah
label_data$z <- label_data$level
label_data$label <- contour_val
g <- ggplot2::ggplot(df, aes(x = x, y = y, z = z)) +
ggplot2::geom_contour(breaks = z_contour) +
ggplot2::geom_contour(breaks = z_threshold, color = "green", linewidth = 1.2) +
ggplot2::geom_text(data=label_data, aes(x=x, y=y, label=label), color="black") +
ggplot2::labs(
title = paste("Joint density function of treatment effect and between-study variance: ", method, " method", sep=""),
x = "treatment effect",
y = "between-study variance"
)
g
plot=TRUE
t0val <- t1val <- array(0, n.rand)
for(k in 1:K){
t0val <- t0val + (yi[k]/(vi[k]+tau2_rand))
t1val <- t1val + (1/(vi[k]+tau2_rand))
}
t0val
(yi[k]/(vi[k]+tau2_rand))
t0val <- t1val <- array(0, n.rand)
for(k in 1:K){
t0val <- t0val + (yi[k]/(vi[k]+c(tau2_rand)))
t1val <- t1val + (1/(vi[k]+c(tau2_rand)))
}
theta_hksj <- t0val / t1val
theta_hksj
## v2hksj
v2hksj <- v2hksj0 <- array(0, n.rand)
for(k in 1:K){
v2hksj0 <- v2hksj0 + (yi[k]-theta_hksj)^2/(vi[k]+c(tau2_rand))
}
v2hksj <- v2hksj0 / ((K-1)*t1val)
v2hksj
# お試しplot
x <- -100:100/10
tval <- (0-theta_hksj[1,])/sqrt(v2hksj[1,])
cil.hksjDL <- uniroot(pt_hksj, theta=theta_hksj, v2=v2hksj, K=K, level=alpha/2, interval=c(theta.min,theta.max))$root
## CI of HKSJ-m
pt_hksj <- function(q, theta, v2, K, level){
tval <- (q-theta)/sqrt(v2)
return(mean(pt(tval, K-1)) - level)
}
cil.hksjDL <- uniroot(pt_hksj, theta=theta_hksj, v2=v2hksj, K=K, level=alpha/2, interval=c(theta.min,theta.max))$root
ciu.hksjDL <- uniroot(pt_hksj, theta=theta_hksj[,i], v2=v2hksj[,i], K=K, level=1-alpha/2, interval=c(theta.min,theta.max))$root
cil.hksjDL <- uniroot(pt_hksj, theta=theta_hksj, v2=v2hksj, K=K, level=alpha/2, interval=c(theta.min,theta.max))$root
ciu.hksjDL <- uniroot(pt_hksj, theta=theta_hksj, v2=v2hksj, K=K, level=1-alpha/2, interval=c(theta.min,theta.max))$root
cil <- uniroot(pt_hksj, theta=theta_hksj, v2=v2hksj, K=K, level=alpha/2, interval=c(theta.min,theta.max))$root
ciu <- uniroot(pt_hksj, theta=theta_hksj, v2=v2hksj, K=K, level=1-alpha/2, interval=c(theta.min,theta.max))$root
cil
ciu
cil <- uniroot(ltheta, thetah=thetah, v2m=v2m, level=1-alpha/2, interval=c(theta.min,theta.max))$root
ciu <- uniroot(ltheta, thetah=thetah, v2m=v2m, level=alpha/2, interval=c(theta.min,theta.max))$root
cil
ciu
library(metaMest)
rma.Muni(yi=1:10, vi=1:10)
rma.Muni(yi=1:10, vi=1:10, plot=FALSE)
ma <- rma.Muni(yi=1:10, vi=1:10, plot=FALSE)
ma$plot
ma <- rma.Muni(yi=1:10, vi=1:10)
ma$plot
ma <- rma.Muni(yi=1:10, vi=1:10, method="SJ")
ma$plot
ma$theta
ma$tau2m
ma$tau2
ma$ci.lb
ma$ci.ub
ma$cil.tau2
ma$ci.lb
library(metaMest)
ma <- rma.Muni(yi=1:10, vi=1:10, method="SJ")
ma$plot
library(metaMest)
yi=1:10
vi=1:10
method="DL"
HKSJ=FALSE
alpha=0.05
n.rand=10000
tau2.max=100
obj="Estimate"
n.grid=300
theta.max=100
theta.min=-100
epsilon=1e-10
contour_val=c(0.01, 0.05, 0.2, 0.4, 0.6, 0.8)
plot=TRUE
K <- length(yi)
s1 <- sum(1/vi); s2 <- sum(1/vi^2)
### each method estimate
if(method=="DL"){
wk <- 1/vi
thetabar0 <- sum(yi*wk)/sum(wk)
Q <- sum(wk*(yi-thetabar0)^2)
tau2u <- (Q-(K-1))/(sum(wk)-sum(wk^2)/sum(wk))
tau2h <- max(0,tau2u)
}else if(method=="SJ"){
thetabar <- mean(yi)
vk <- 1+ K*vi/sum((yi - thetabar)^2)
theta_v <- sum(yi/vk) / sum(1/vk)
tau2h <- sum((yi-theta_v)^2/vk) / (K-1)
}
wkh <- 1/(vi + tau2h)
thetah <- sum(wkh*yi) / sum(wkh)
v2h <- 1/sum(wkh)
### M-estimator
r_chisq <- array(rchisq(K*n.rand, df=1), c(n.rand,K))
tau2m <- optimize(rfunc, tau2h=tau2h, vi=vi, r_chisq=r_chisq, method=method, interval=c(0,tau2.max))$minimum
### CI of between-study variance
eigen_tau2 <- dtau2_eigen(tau2=tau2h, vi=vi, method=method)
if(method=="DL"){
tau2_rand <- (r_chisq %*% eigen_tau2 - (K-1))/(s1-s2/s1)
}else if (method=="SJ"){
tau2_rand <- r_chisq %*% eigen_tau2
}
tau2_rand[tau2_rand<=epsilon] <- epsilon
cil.tau2 <- quantile(tau2_rand, probs=alpha/2)
ciu.tau2 <- quantile(tau2_rand, probs=1-alpha/2)
### CI of overall treatment effect
if(!HKSJ){
v2m <- numeric(n.rand)
for(k in 1:K){
v2m <- v2m + 1/(vi[k]+tau2_rand)
}
v2m <- 1/v2m
ltheta <- function(theta, thetah, v2m, level){
mean(pnorm(thetah, theta, sqrt(v2m))) - level
}
cil <- uniroot(ltheta, thetah=thetah, v2m=v2m, level=1-alpha/2, interval=c(theta.min,theta.max))$root
ciu <- uniroot(ltheta, thetah=thetah, v2m=v2m, level=alpha/2, interval=c(theta.min,theta.max))$root
}else{
t0val <- t1val <- array(0, n.rand)
for(k in 1:K){
t0val <- t0val + (yi[k]/(vi[k]+c(tau2_rand)))
t1val <- t1val + (1/(vi[k]+c(tau2_rand)))
}
theta_hksj <- t0val / t1val
## v2hksj
v2hksj <- v2hksj0 <- array(0, n.rand)
for(k in 1:K){
v2hksj0 <- v2hksj0 + (yi[k]-theta_hksj)^2/(vi[k]+c(tau2_rand))
}
v2hksj <- v2hksj0 / ((K-1)*t1val)
## CI of HKSJ-m
pt_hksj <- function(q, theta, v2, K, level){
tval <- (q-theta)/sqrt(v2)
return(mean(pt(tval, K-1)) - level)
}
cil <- uniroot(pt_hksj, theta=theta_hksj, v2=v2hksj, K=K, level=alpha/2, interval=c(theta.min,theta.max))$root
ciu <- uniroot(pt_hksj, theta=theta_hksj, v2=v2hksj, K=K, level=1-alpha/2, interval=c(theta.min,theta.max))$root
}
pmin.theta <- uniroot(ltheta, thetah=thetah, v2m=v2m, level=0.9999, interval=c(theta.min,theta.max))$root
pmax.theta <- uniroot(ltheta, thetah=thetah, v2m=v2m, level=0.0001, interval=c(theta.min,theta.max))$root
p.tau2 <- quantile(tau2_rand, probs=c(0.0001, 0.9999))
p.tau2
yval <- seq(pmin.theta, pmax.theta, length.out=n.grid)
xval <- seq(p.tau2[1], p.tau2[2], length.out=n.grid)
v2
yval <- seq(pmin.theta, pmax.theta, length.out=n.grid)
xval <- seq(p.tau2[1], p.tau2[2], length.out=n.grid)
zval <- dsim_th_tau2(y=yval, x=xval, theta=thetah, tau2=tau2h, K=K, vi=vi, method=method, obj=obj)
df <- expand.grid(x = yval, y = xval)
df$z <- as.vector(t(zval))
# threshold
v2 <- array(1 / sapply(tau2_rand, function(xval) sum(1/(vi+xval))), dim=c(n,length(tau2)))
# threshold
v2 <- 1 / sapply(tau2_rand, function(xval) sum(1/(vi+xval)))
v2
y <- rnorm(n=n.rand, mean=thetah, sd=sqrt(v2))
y
y <- rnorm(n=n.rand, mean=thetah, sd=sqrt(v2+tau2_rand))
y
y <- rnorm(n=n.rand, mean=thetah, sd=sqrt(v2))
dxys <- dsim_th_tau2(y=yrand, x=c(tau2_rand), theta=thetah, tau2=tau2h, K=K, vi=vi, method=method, obj=obj)
yrand <- rnorm(n=n.rand, mean=thetah, sd=sqrt(v2))
dxys <- dsim_th_tau2(y=yrand, x=c(tau2_rand), theta=thetah, tau2=tau2h, K=K, vi=vi, method=method, obj=obj)
z_threshold <- quantile(dxys, probs = alpha)
z_contour <- quantile(dxys, probs = contour_val)
z_threshold <- quantile(dxys, probs = alpha)
# labeling
contour_plot <- ggplot2::ggplot(df, aes(x = x, y = y, z = z)) +
ggplot2::geom_contour(breaks = z_contour)
contour_data <- ggplot2::ggplot_build(contour_plot)$data[[1]]
label_data <- aggregate(cbind(x,y) ~ level, data = contour_data, FUN = max)
label_data$x <- thetah
label_data$z <- label_data$level
label_data$label <- contour_val
g <- ggplot2::ggplot(df, aes(x = x, y = y, z = z)) +
ggplot2::geom_contour(breaks = z_contour) +
ggplot2::geom_contour(breaks = z_threshold, color = "green", linewidth = 1.2) +
ggplot2::geom_text(data=label_data, aes(x=x, y=y, label=label), color="black") +
ggplot2::labs(
title = paste("Joint density function of treatment effect and between-study variance: ", method, " method", sep=""),
x = "treatment effect",
y = "between-study variance"
)
g
yrand <- rnorm(n=n.rand, mean=thetah, sd=sqrt(v2+tau2_rand))
dxys <- dsim_th_tau2(y=yrand, x=c(tau2_rand), theta=thetah, tau2=tau2h, K=K, vi=vi, method=method, obj=obj)
z_threshold <- quantile(dxys, probs = alpha)
z_contour <- quantile(dxys, probs = contour_val)
z_threshold <- quantile(dxys, probs = alpha)
# labeling
contour_plot <- ggplot2::ggplot(df, aes(x = x, y = y, z = z)) +
ggplot2::geom_contour(breaks = z_contour)
contour_data <- ggplot2::ggplot_build(contour_plot)$data[[1]]
label_data <- aggregate(cbind(x,y) ~ level, data = contour_data, FUN = max)
label_data$x <- thetah
label_data$z <- label_data$level
label_data$label <- contour_val
v2m
max(tau2_rand)
pmin.theta <- uniroot(ltheta, thetah=thetah, v2m=v2m+max(tau2_rand), level=0.9999, interval=c(theta.min,theta.max))$root
pmax.theta <- uniroot(ltheta, thetah=thetah, v2m=v2m+max(tau2_rand), level=0.0001, interval=c(theta.min,theta.max))$root
yval <- seq(pmin.theta, pmax.theta, length.out=n.grid)
xval <- seq(p.tau2[1], p.tau2[2], length.out=n.grid)
zval <- dsim_th_tau2(y=yval, x=xval, theta=thetah, tau2=tau2h, K=K, vi=vi, method=method, obj=obj)
df <- expand.grid(x = yval, y = xval)
df$z <- as.vector(t(zval))
# threshold
v2 <- 1 / sapply(tau2_rand, function(xval) sum(1/(vi+xval)))
yrand <- rnorm(n=n.rand, mean=thetah, sd=sqrt(v2+tau2_rand))
dxys <- dsim_th_tau2(y=yrand, x=c(tau2_rand), theta=thetah, tau2=tau2h, K=K, vi=vi, method=method, obj=obj)
z_threshold <- quantile(dxys, probs = alpha)
z_contour <- quantile(dxys, probs = contour_val)
z_threshold <- quantile(dxys, probs = alpha)
# labeling
contour_plot <- ggplot2::ggplot(df, aes(x = x, y = y, z = z)) +
ggplot2::geom_contour(breaks = z_contour)
contour_data <- ggplot2::ggplot_build(contour_plot)$data[[1]]
label_data <- aggregate(cbind(x,y) ~ level, data = contour_data, FUN = max)
label_data$x <- thetah
label_data$z <- label_data$level
label_data$label <- contour_val
g <- ggplot2::ggplot(df, aes(x = x, y = y, z = z)) +
ggplot2::geom_contour(breaks = z_contour) +
ggplot2::geom_contour(breaks = z_threshold, color = "green", linewidth = 1.2) +
ggplot2::geom_text(data=label_data, aes(x=x, y=y, label=label), color="black") +
ggplot2::labs(
title = paste("Joint density function of treatment effect and between-study variance: ", method, " method", sep=""),
x = "treatment effect",
y = "between-study variance"
)
g
p.tau2[2]
p.tau2[2] <- 2*p.tau2[2]
pmin.theta <- uniroot(ltheta, thetah=thetah, v2m=v2m+max(tau2_rand), level=0.9999, interval=c(theta.min,theta.max))$root
pmax.theta <- uniroot(ltheta, thetah=thetah, v2m=v2m+max(tau2_rand), level=0.0001, interval=c(theta.min,theta.max))$root
yval <- seq(pmin.theta, pmax.theta, length.out=n.grid)
xval <- seq(p.tau2[1], p.tau2[2], length.out=n.grid)
zval <- dsim_th_tau2(y=yval, x=xval, theta=thetah, tau2=tau2h, K=K, vi=vi, method=method, obj=obj)
df <- expand.grid(x = yval, y = xval)
df$z <- as.vector(t(zval))
yrand <- rnorm(n=n.rand, mean=thetah, sd=sqrt(v2+tau2_rand))
dxys <- dsim_th_tau2(y=yrand, x=c(tau2_rand), theta=thetah, tau2=tau2h, K=K, vi=vi, method=method, obj=obj)
z_threshold <- quantile(dxys, probs = alpha)
z_contour <- quantile(dxys, probs = contour_val)
z_threshold <- quantile(dxys, probs = alpha)
# labeling
contour_plot <- ggplot2::ggplot(df, aes(x = x, y = y, z = z)) +
ggplot2::geom_contour(breaks = z_contour)
contour_data <- ggplot2::ggplot_build(contour_plot)$data[[1]]
label_data <- aggregate(cbind(x,y) ~ level, data = contour_data, FUN = max)
label_data$x <- thetah
label_data$z <- label_data$level
label_data$label <- contour_val
g <- ggplot2::ggplot(df, aes(x = x, y = y, z = z)) +
ggplot2::geom_contour(breaks = z_contour) +
ggplot2::geom_contour(breaks = z_threshold, color = "green", linewidth = 1.2) +
ggplot2::geom_text(data=label_data, aes(x=x, y=y, label=label), color="black") +
ggplot2::labs(
title = paste("Joint density function of treatment effect and between-study variance: ", method, " method", sep=""),
x = "treatment effect",
y = "between-study variance"
)
g
library(metaMest)
library(metaMest)
